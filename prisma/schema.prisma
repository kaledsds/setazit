// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    sessionType  String?
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String      @unique
    role          String      @default("USER")
    emailVerified DateTime?
    image         String?
    password      String?
    dateOfBirth   DateTime?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    Dealership    Dealership?
    Order         Order[]
    Review        Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Car {
    id           String     @id @default(cuid())
    image        String?
    brand        String
    model        String
    year         Int
    price        String
    status       String
    color        String
    availability Boolean    @default(true)
    dealershipId String
    dealership   Dealership @relation(fields: [dealershipId], references: [id], onDelete: Cascade)
    orders       Order[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@index([dealershipId])
    @@index([brand])
    @@index([model])
    @@map("Voiture")
}

model Part {
    id           String     @id @default(cuid())
    image        String?
    name         String
    brand        String
    model        String
    condition    Int
    price        String
    availability Boolean    @default(true)
    dealershipId String
    dealership   Dealership @relation(fields: [dealershipId], references: [id], onDelete: Cascade)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@index([dealershipId])
    @@index([brand])
    @@index([name])
    @@map("Pieces")
}

model Garage {
    id           String     @id @default(cuid())
    image        String?
    name         String
    address      String
    phone        String
    services     String
    description  String
    availability Boolean    @default(true)
    dealershipId String
    dealership   Dealership @relation(fields: [dealershipId], references: [id], onDelete: Cascade)
    reviews      Review[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@index([dealershipId])
    @@index([name])
    @@map("Garage")
}

model Dealership {
    id        String   @id @default(cuid())
    image     String?
    name      String
    address   String
    nature    String
    phone     String
    email     String
    userId    String   @unique
    cars      Car[]
    parts     Part[]
    garages   Garage[]
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email])
    @@index([name])
    @@map("Dealer_ship")
}

model Order {
    id        String   @id @default(cuid())
    date      DateTime @default(now())
    status    String
    carId     String
    car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
    usertId   String
    user      User     @relation(fields: [usertId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([carId])
    @@index([usertId])
    @@index([status])
    @@map("Commande")
}

model Review {
    id        String   @id @default(cuid())
    rating    String
    date      DateTime @default(now())
    comment   String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    garageId  String?
    garage    Garage?  @relation(fields: [garageId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([garageId])
    @@map("Avis")
}
